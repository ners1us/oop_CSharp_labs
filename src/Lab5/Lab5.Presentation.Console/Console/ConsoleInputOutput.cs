using System.Globalization;using System.Security.Cryptography;using Lab5.Application.Abstractions;using Lab5.Application.Models;using Lab5.Presentation.Console.Atm;namespace Lab5.Presentation.Console.Console;public class ConsoleInputOutput : IConsoleInputOutput{    private readonly AutomaticTellerMachine _automaticTellerMachine;    private readonly IAccountRepository _accountRepository;    private readonly string _systemPassword;    public ConsoleInputOutput(AutomaticTellerMachine automaticTellerMachine, string systemPassword, IAccountRepository accountRepository)    {        _automaticTellerMachine = automaticTellerMachine;        _systemPassword = systemPassword;        _accountRepository = accountRepository;    }    public void Run()    {        System.Console.WriteLine("Welcome to the ATM!");        while (true)        {            System.Console.WriteLine("Choose mode:");            System.Console.WriteLine("1. User");            System.Console.WriteLine("2. Administrator");            System.Console.WriteLine("3. Exit");            string? choice = System.Console.ReadLine();            switch (choice)            {                case "1":                    UserMode();                    break;                case "2":                    AdministratorMode();                    break;                case "3":                    return;                default:                    System.Console.WriteLine("Invalid choice");                    break;            }        }    }    private static int GenerateRandomAccountNumber()    {        using var rng = RandomNumberGenerator.Create();        byte[] randomNumber = new byte[4];        rng.GetBytes(randomNumber);        int accountNumber = BitConverter.ToInt32(randomNumber, 0) & int.MaxValue;        return (accountNumber % (9999 - 1000 + 1)) + 1000;    }    private void UserMode()    {        System.Console.WriteLine("Enter account number:");        int accountNumber = int.Parse(System.Console.ReadLine() ?? throw new InvalidOperationException(), CultureInfo.InvariantCulture);        System.Console.WriteLine("Enter PIN:");        int pin = int.Parse(System.Console.ReadLine() ?? throw new InvalidOperationException(), CultureInfo.InvariantCulture);        while (true)        {            System.Console.WriteLine("Choose operation:");            System.Console.WriteLine("1. View balance");            System.Console.WriteLine("2. Withdraw");            System.Console.WriteLine("3. Deposit");            System.Console.WriteLine("4. View transaction history");            System.Console.WriteLine("5. Change pin");            System.Console.WriteLine("6. Back");            string? choice = System.Console.ReadLine();            switch (choice)            {                case "1":                    ViewBalance(accountNumber, pin);                    break;                case "2":                    Withdraw(accountNumber, pin);                    break;                case "3":                    Deposit(accountNumber, pin);                    break;                case "4":                    ViewHistory(accountNumber, pin);                    break;                case "5":                    ChangePin();                    break;                case "6":                    return;                default:                    System.Console.WriteLine("Invalid choice");                    break;            }        }    }    private void ViewBalance(int accountNumber, int pin)    {        var request = new AtmRequest        {            AccountNumber = accountNumber,            Pin = pin,            Operation = "ViewBalance",        };        _automaticTellerMachine.ProcessRequest(request);    }    private void Withdraw(int accountNumber, int pin)    {        System.Console.WriteLine("Enter amount to withdraw:");        double amount = double.Parse(System.Console.ReadLine() ?? throw new InvalidOperationException(), CultureInfo.InvariantCulture);        var request = new AtmRequest        {            AccountNumber = accountNumber,            Pin = pin,            Operation = "Withdraw",            Amount = amount,        };        _automaticTellerMachine.ProcessRequest(request);    }    private void Deposit(int accountNumber, int pin)    {        System.Console.WriteLine("Enter amount to deposit:");        double amount = double.Parse(System.Console.ReadLine() ?? throw new InvalidOperationException(), CultureInfo.InvariantCulture);        var request = new AtmRequest        {            AccountNumber = accountNumber,            Pin = pin,            Operation = "Deposit",            Amount = amount,        };        _automaticTellerMachine.ProcessRequest(request);    }    private void ViewHistory(int accountNumber, int pin)    {        var request = new AtmRequest        {            AccountNumber = accountNumber,            Pin = pin,            Operation = "ViewHistory",        };        _automaticTellerMachine.ProcessRequest(request);    }    private void AdministratorMode()    {        System.Console.WriteLine("Enter system password:");        string? password = System.Console.ReadLine();        if (password != _systemPassword)        {            System.Console.WriteLine("Incorrect password");            return;        }        while (true)        {            System.Console.WriteLine("Choose operation:");            System.Console.WriteLine("1. Create account");            System.Console.WriteLine("2. Back");            string? choice = System.Console.ReadLine();            switch (choice)            {                case "1":                    CreateAccount();                    break;                case "2":                    return;                default:                    System.Console.WriteLine("Invalid choice");                    break;            }        }    }    private void CreateAccount()    {        System.Console.WriteLine("Enter PIN:");        int pin = int.Parse(System.Console.ReadLine() ?? throw new InvalidOperationException(), CultureInfo.InvariantCulture);        int accountNumber;        do        {            accountNumber = GenerateRandomAccountNumber();        }        while (_accountRepository.AccountExists(accountNumber));        System.Console.WriteLine("Your unique account number is: " + accountNumber);        var request = new AtmRequest        {            AccountNumber = accountNumber,            Pin = pin,            Operation = "CreateAccount",        };        _automaticTellerMachine.ProcessRequest(request);    }    private void ChangePin()    {        System.Console.WriteLine("Enter account number again:");        int accountNumber = int.Parse(System.Console.ReadLine() ?? throw new InvalidOperationException(), CultureInfo.InvariantCulture);        System.Console.WriteLine("Enter new PIN:");        int pin = int.Parse(System.Console.ReadLine() ?? throw new InvalidOperationException(), CultureInfo.InvariantCulture);        var request = new AtmRequest        {            AccountNumber = accountNumber,            NewPin = pin,            Operation = "ChangePIN",        };        _automaticTellerMachine.ProcessRequest(request);    }}